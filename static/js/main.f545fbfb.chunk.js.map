{"version":3,"sources":["components/common/Loading/index.js","utils/dateHelper.js","utils/numberHelper.js","components/ListCovid/index.js","constants/index.js","components/common/Modal/index.js","components/CovidDetail/index.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","className","formatDate","dateString","isNaN","Date","parse","date","getMonth","String","getDate","padStart","getFullYear","numberWithCommas","x","toString","replace","ListCovid","data","loading","toggleLoading","useState","showModal","setShowModal","detailData","setDetailData","_toggleModal","prev","toggleModal","map","item","index","onClick","Promise","all","fetch","CountryCode","then","res","r","json","_handleShowDetail","Country","TotalConfirmed","TotalDeaths","TotalRecovered","ModalCustom","show","children","title","onClose","showHideClassName","width","src","alt","CovidDetail","covidInfo","covidPeriodTime","Modal","flags","png","name","common","population","capital","subregion","length","ResponsiveContainer","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","formatDateShort","YAxis","Tooltip","formatter","labelFormatter","Legend","Line","type","stroke","App","listCovidData","setListCovidData","setLoading","useEffect","_toggleLoading","contries","Countries","sort","firstEl","secondEl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f545fbfb.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css';\n\nconst Loading = () => {\n  return (\n    <div className=\"root-loading\">\n      <div className=\"lds-grid\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    </div>\n  )\n}\n\nexport default Loading;\n","export const formatDate = (dateString) => {\n  if (!dateString) {\n    return;\n  }\n  if (isNaN(Date.parse(dateString))) {\n    return;\n  }\n\n  const date = new Date(dateString);\n  const monthNames = [\"Ja\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = monthNames[date.getMonth()];\n  const day = String(date.getDate()).padStart(2, '0');\n  const year = date.getFullYear();\n  return month  + '\\n'+ day  + ', ' + year;\n}\n\nexport const formatDateShort = (dateString) => {\n  if (!dateString) {\n    return;\n  }\n  if (isNaN(Date.parse(dateString))) {\n    return;\n  }\n\n  const date = new Date(dateString);\n  const monthNames = [\"Ja\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const month = monthNames[date.getMonth()];\n  const year = date.getFullYear();\n  return month  + ' ' + year;\n}","export function numberWithCommas(x) {\n    if (!x) {\n        return 0;\n    }\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React, { useState } from 'react';\nimport { CovidDetail } from '../';\nimport { API_DETAIL, API_DETAIL_PERIOD_TIME } from './../../constants';\nimport Loading from '../common/Loading/index';\nimport './styles.css';\nimport { formatDate } from '../../utils/dateHelper';\nimport { numberWithCommas } from '../../utils/numberHelper';\n\nconst ListCovid = ({\n  data = [],\n  loading = false,\n  toggleLoading\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [detailData, setDetailData] = useState([]);\n  \n  const _handleShowDetail = (item) => {\n    toggleLoading();\n    Promise.all([\n      fetch(API_DETAIL.replace('{code}', item.CountryCode)),\n      fetch(API_DETAIL_PERIOD_TIME.replace('{code}', item.CountryCode))\n    ])\n      .then(res => Promise.all(res.map(r => r.json())))\n      .then(data => {\n        setDetailData(data);\n        toggleLoading();\n        _toggleModal();\n      })\n  };\n\n  const _toggleModal = () => {\n    setShowModal(prev => !prev);\n  }\n\n  return (\n    <div className=\"root-list-covid\">\n      {showModal && <CovidDetail toggleModal={_toggleModal} detailData={detailData} />}\n      <div className=\"wrapper-table\">\n        <table className=\"table-custom\">\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Country name</th>\n              <th>Total confirmed</th>\n              <th>Total deaths</th>\n              <th>Total recovered</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((item, index) => (\n              <tr onClick={() => _handleShowDetail(item)} key={index}>\n                <td>{formatDate(item.Date)}</td>\n                <td>{item.Country}</td>\n                <td>{numberWithCommas(item.TotalConfirmed)}</td>\n                <td>{numberWithCommas(item.TotalDeaths)}</td>\n                <td>{numberWithCommas(item.TotalRecovered)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {loading && <Loading />}\n      </div>\n    </div>\n  )\n}\n\nexport default ListCovid\n","export const API_DETAIL = 'https://restcountries.com/v3.1/alpha/{code}';\nexport const API_DETAIL_PERIOD_TIME = 'https://api.covid19api.com/country/{code}';","import React from \"react\";\nimport \"./styles.css\";\n\nconst ModalCustom = ({\n  show,\n  children,\n  title,\n  onClose\n}) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  return (\n    <div className={showHideClassName}>\n      <section className=\"modal-main\">\n        <div className=\"header-modal\">\n          <span className=\"title\">{title}</span>\n          <span className=\"icon-close\" onClick={onClose}>\n            <img width=\"30\" src='/images/cancel.png' alt=\"icon-close\" />\n          </span>\n        </div>\n        <div className=\"content-modal\">\n          {children}\n        </div>\n      </section>\n\n    </div>\n  );\n}\n\nexport default ModalCustom;\n","import React from 'react';\nimport ModalCustom from '../common/Modal';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { numberWithCommas } from '../../utils/numberHelper';\nimport { formatDateShort, formatDate } from '../../utils/dateHelper';\nimport './styles.css';\n\nconst CovidDetail = ({\n\tdetailData = [],\n\ttoggleModal\n}) => {\n\tconst [covidInfo, covidPeriodTime] = detailData;\n\treturn (\n\t\t<div>\n\t\t\t<ModalCustom onClose={toggleModal} title=\"Detail Information\" show={true}>\n\t\t\t\t<div className='info-covid'>\n\t\t\t\t\t<div className=\"line-item info-name\">\n\t\t\t\t\t\t<img src={covidInfo[0]?.flags?.png} alt=\"flag-country\" width={40}/>\n\t\t\t\t\t\t<span>{covidInfo[0]?.name?.common}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"line-item\">\n\t\t\t\t\t\t<label className=\"label-info\">Population:</label>\n\t\t\t\t\t\t<div className=\"value-info\">{numberWithCommas(covidInfo[0]?.population)}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"line-item\">\n\t\t\t\t\t\t<label className=\"label-info\">Capital:</label>\n\t\t\t\t\t\t<div className=\"value-info\">\n\t\t\t\t\t\t\t{(covidInfo[0]?.capital || []).map((capital, index) => (\n\t\t\t\t\t\t\t\t<span key={index}>{capital}</span>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"line-item\">\n\t\t\t\t\t\t<label className=\"label-info\">Subregion:</label>\n\t\t\t\t\t\t<div className=\"value-info\">{covidInfo[0]?.subregion}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"covid-period-time\">\n\t\t\t\t\t<h2 className=\"header-total\">Total covid case in {covidInfo[0]?.name?.common}</h2>\n\t\t\t\t\t\n\t\t\t\t\t{covidPeriodTime.length ? (\n\t\t\t\t\t\t<div className=\"content-chart\">\n\t\t\t\t\t\t\t<ResponsiveContainer width=\"100%\" height=\"100%\">\n\t\t\t\t\t\t\t\t<LineChart\n\t\t\t\t\t\t\t\t\twidth={500}\n\t\t\t\t\t\t\t\t\theight={300}\n\t\t\t\t\t\t\t\t\tdata={covidPeriodTime}\n\t\t\t\t\t\t\t\t\tmargin={{\n\t\t\t\t\t\t\t\t\t\ttop: 5,\n\t\t\t\t\t\t\t\t\t\tright: 30,\n\t\t\t\t\t\t\t\t\t\tleft: 20,\n\t\t\t\t\t\t\t\t\t\tbottom: 5,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t\t\t\t\t\t<XAxis dataKey=\"Date\" tickFormatter={data => {\n\t\t\t\t\t\t\t\t\t\treturn formatDateShort(data);\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t\t<YAxis tickFormatter={data => {\n\t\t\t\t\t\t\t\t\t\treturn numberWithCommas(data);\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t\t<Tooltip \n\t\t\t\t\t\t\t\t\t\tformatter={data => {\n\t\t\t\t\t\t\t\t\t\t\treturn numberWithCommas(data);\n\t\t\t\t\t\t\t\t\t\t}} \n\t\t\t\t\t\t\t\t\t\tlabelFormatter={data => {\n\t\t\t\t\t\t\t\t\t\t\treturn formatDate(data)\n\t\t\t\t\t\t\t\t\t\t}} \n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Legend />\n\t\t\t\t\t\t\t\t\t<Line type=\"monotone\" dataKey=\"Confirmed\" stroke=\"#82ca9d\" />\n\t\t\t\t\t\t\t\t</LineChart>\n\t\t\t\t\t\t\t</ResponsiveContainer>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=\"empty-data\">No Data</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</ModalCustom>\n\t\t</div>\n\t)\n}\n\nexport default CovidDetail;\n","import { useEffect, useState } from 'react';\nimport { ListCovid } from './components';\nimport './App.css';\nconst API_SUMMARY = 'https://api.covid19api.com/summary';\n\nfunction App() {\n  const [listCovidData, setListCovidData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    _toggleLoading();\n    fetch(API_SUMMARY)\n      .then(res => res.json())\n      .then(data => {\n        const contries = data.Countries;\n        if (contries && contries.length) {\n          contries.sort((firstEl, secondEl) => {\n            return (\n              secondEl.TotalConfirmed - firstEl.TotalConfirmed ||\n              secondEl.TotalDeaths - firstEl.TotalDeaths ||\n              secondEl.TotalRecovered - firstEl.TotalRecovered\n            );\n          });\n        }\n        setListCovidData(contries);\n        _toggleLoading();\n      });\n  }, []);\n\n  const _toggleLoading = () => {\n    setLoading(prev => !prev);\n  }\n\n  return (\n    <div className=\"root\">\n      <h2 className='header'>COVID INFORMATION</h2>\n      <ListCovid \n        toggleLoading={_toggleLoading} \n        loading={loading} \n        data={listCovidData} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}